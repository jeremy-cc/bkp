# -*- mode: ruby -*-
# vi: set ft=ruby :

vm_interfaces = %x( VBoxManage list bridgedifs).split("\n").map { |l| /^Name:\s+(.*)/.match(l); $1  }.compact
first_vm_interface = vm_interfaces.sort[0]

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.define "default", primary:true do |dev| 
    dev.vm.box = "tcc_developer" 
    dev.vm.box_url = "http://lon1prodfsv001.ccycloud.com/build/vagrant/tcc_developer.box"
  end

  config.vm.define "default", primary: true do |server|
    server.vm.box = "d8srv"
    server.vm.box_url = "file:///Users/jeremybotha/debian/virtualbox.box"
  end  

  # config.vm.box_download_checksum_type = "sha1"
  # config.vm.box_download_checksum = "99f0aac081c8386b2ce8e408d5e5976f76fd513e"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #config.vm.network :public_network, :use_dhcp_assigned_default_route => true
  # config.vm.network :public_network, :bridge => first_vm_interface, :use_dhcp_assigned_default_route => true
  #config.vm.network :public_network, :bridge => 'en1: Wi-Fi (AirPort)', :use_dhcp_assigned_default_route => true

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.10.10"



  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
     # Don't boot with headless mode
     #vb.gui = true

    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "10200"]
    vb.customize ["modifyvm", :id, "--cpus", "4"]
  end

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080
  #config.vm.network :forwarded_port, guest: 22, host: 2222
  # Share SSH locally by default
  config.vm.network :forwarded_port, guest: 22, host: 2222, host_ip: "0.0.0.0", id: "ssh", auto_correct: true
  config.vm.network :forwarded_port, guest: 80, host: 80, host_ip: "0.0.0.0", id: "http"
  config.vm.network :forwarded_port, guest: 3306,  host: 3306,  id: "mysql"
  config.vm.network :forwarded_port, guest: 6379,  host: 6379,  id: "redis"
  config.vm.network :forwarded_port, guest: 9990,  host: 9990,  id: "torquebox"
  config.vm.network :forwarded_port, guest: 38080, host: 38080, id: "torquebox-web"
  config.vm.network :forwarded_port, guest: 38050, host: 38050, id: "reporting-engine-trinidad"
  config.vm.network :forwarded_port, guest: 38081, host: 38081, id: "pricing-engine-trinidad"
  config.vm.network :forwarded_port, guest: 38060, host: 38060, id: "fix_engine_barclays"
  config.vm.network :forwarded_port, guest: 38061, host: 38061, id: "fix_engine_oanda"
  config.vm.network :forwarded_port, guest: 38062, host: 38062, id: "fix_engine_seb"

# If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "./", "/vagrant"
  config.vm.synced_folder "/Users/jeremybotha/development/ansible", "/opt/deploy/ansible", type: "nfs"
  config.vm.synced_folder "/Users/jeremybotha/development/platform", "/opt/deploy/ccycloud/mirrors/platform"        , type: "nfs"

  #vagrant ssh -c "ssh -t ansible@lon1prodctl002.ccycloud.com -- -e seed_dbs=yes -t databases"
end

